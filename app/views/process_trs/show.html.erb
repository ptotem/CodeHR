<!--style for nested sortable list-->
<style type="text/css">

    .placeholder {
        outline: 1px dashed #4183C4;
    }

    .mjs-nestedSortable-error {
        background: none repeat scroll 0 0 #FBE3E4;
        border-color: rgba(0, 0, 0, 0);
    }

    ol {
        margin: 0;
        padding: 0 0 0 30px;
    }

    ol.sortable, ol.sortable ol {
        list-style-type: none;
        margin: 0 0 0 25px;
        padding: 0;
    }

    ol.sortable {
        margin: 4em 0;
    }

    .sortable li {
        margin: 5px 0 0;
        padding: 0;
    }

    .sortable li div {
        -moz-border-bottom-colors: none;
        -moz-border-left-colors: none;
        -moz-border-right-colors: none;
        -moz-border-top-colors: none;
        background: linear-gradient(to bottom, #FFFFFF 0%, #F6F6F6 47%, #EDEDED 100%) repeat scroll 0 0 rgba(0, 0, 0, 0);
        border-color: #D4D4D4 #D4D4D4 #BCBCBC;
        border-image: none;
        border-radius: 3px;
        border-style: solid;
        border-width: 1px;
        cursor: move;
        margin: 0;
        padding: 6px;
    }

    .sortable li.mjs-nestedSortable-branch div {
        background: -moz-linear-gradient(center top, #FFFFFF 0%, #F6F6F6 47%, #F0ECE9 100%) repeat scroll 0 0 rgba(0, 0, 0, 0);
    }

    .sortable li.mjs-nestedSortable-leaf div {
        background: -moz-linear-gradient(center top, #FFFFFF 0%, #F6F6F6 47%, #BCCCBC 100%) repeat scroll 0 0 rgba(0, 0, 0, 0);
    }

    li.mjs-nestedSortable-collapsed.mjs-nestedSortable-hovering div {
        background: none repeat scroll 0 0 #FAFAFA;
        border-color: #999999;
    }

    .disclose {
        cursor: pointer;
        display: none;
        width: 10px;
    }

    .sortable li.mjs-nestedSortable-collapsed > ol {
        display: none;
    }

    .sortable li.mjs-nestedSortable-branch > div > .disclose {
        display: inline-block;
    }

    .sortable li.mjs-nestedSortable-collapsed > div > .disclose > span:before {
        content: "+ ";
    }

    .sortable li.mjs-nestedSortable-expanded > div > .disclose > span:before {
        content: "- ";
    }

    .notice {
        color: #CC3333;
    }


</style>
<!--style for nested sortable list-->

<p id="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @process_tr.name %>
</p>
<h4><b>Steps:</b></h4>
<div class="row-fluid">
  <div class="span4">
    <section id="demo">
      <ol class="sortable ui-sortable">
        <li id="list_4" class="mjs-nestedSortable-leaf">
          <div><span class="disclose"><span></span></span>Item 2</div>
        </li>
        <li id="list_9" class="mjs-nestedSortable-leaf">
          <div><span class="disclose"><span></span></span>Item 4</div>
        </li>
        <li id="list_10" class="mjs-nestedSortable-leaf">
          <div><span class="disclose"><span></span></span>Item 5</div>
        </li>
      </ol>

    </section>
  </div>
</div>



<%= link_to 'Edit', edit_process_tr_path(@process_tr) %> |
<%= link_to 'Back', process_trs_path %>


<script type="text/javascript" src="//code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
<script type="text/javascript" src="/assets/jquery.mjs.nestedSortable.js"></script>


<script>

    $(function () {
        //$( ".sortable" ).sortable();

        $('ol.sortable').nestedSortable({
            forcePlaceholderSize: true,
            handle: 'div',
            helper: 'clone',
            items: 'li',
            opacity: .6,
            placeholder: 'placeholder',
            revert: 250,
            tabSize: 25,
            tolerance: 'pointer',
            toleranceElement: '> div',
            maxLevels: 3,
            isTree: true,
            expandOnHover: 700,
            startCollapsed: true
        })


        $('.disclose').on('click', function () {
            $(this).closest('li').toggleClass('mjs-nestedSortable-collapsed').toggleClass('mjs-nestedSortable-expanded');
        })
        $('#serialize').click(function () {
            serialized = $('ol.sortable').nestedSortable('serialize');
            $('#serializeOutput').text(serialized + '\n\n');
        })
        $('#toHierarchy').click(function (e) {
            hiered = $('ol.sortable').nestedSortable('toHierarchy', {startDepthCount: 0});
            hiered = dump(hiered);
            (typeof($('#toHierarchyOutput')[0].textContent) != 'undefined') ?
                    $('#toHierarchyOutput')[0].textContent = hiered : $('#toHierarchyOutput')[0].innerText = hiered;
        })
        $('#toArray').click(function (e) {
            arraied = $('ol.sortable').nestedSortable('toArray', {startDepthCount: 0});
            arraied = dump(arraied);
            (typeof($('#toArrayOutput')[0].textContent) != 'undefined') ?
                    $('#toArrayOutput')[0].textContent = arraied : $('#toArrayOutput')[0].innerText = arraied;
        })
    });
    function dump(arr, level) {
        var dumped_text = "";
        if (!level) level = 0;
//The padding given at the beginning of the line.
        var level_padding = "";
        for (var j = 0; j < level + 1; j++) level_padding += " ";
        if (typeof(arr) == 'object') { //Array/Hashes/Objects
            for (var item in arr) {
                var value = arr[item];
                if (typeof(value) == 'object') { //If it is an array,
                    dumped_text += level_padding + "'" + item + "' ...\n";
                    dumped_text += dump(value, level + 1);
                } else {
                    dumped_text += level_padding + "'" + item + "' => \"" + value + "\"\n";
                }
            }
        } else { //Strings/Chars/Numbers etc.
            dumped_text = "===>" + arr + "<===(" + typeof(arr) + ")";
        }
        return dumped_text;
    }
</script>
